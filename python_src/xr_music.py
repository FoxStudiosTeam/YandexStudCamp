"""
Скрипт управления WiFi-роботом с видеосвязью для Raspberry Pi
Автор: Sence
Права принадлежат компании XiaoR Technologies (г. Шэньчжэнь, Китай, www.xiao-r.com); форум WIFI роботов www.wifi-robots.com
Данный код может быть свободно модифицирован, однако запрещено его использование в коммерческих целях!
Данный код защищен авторским правом на программное обеспечение, любые нарушения будут преследоваться по закону!
"""
"""
@version: python3.7
@Author  : xiaor
@Explain : Звук сигнализатора
@contact :
@Time    :2020/05/09
@File    :xr_music.py
@Software: PyCharm
"""
import time
from builtins import range, object, len, int

import xr_gpio as gpio
import xr_config as cfg


class Beep(object):
	def __init__(self):
		# Высокие частоты
		self.H1 = 8
		self.H2 = 9
		self.H3 = 10
		self.H4 = 11
		self.H5 = 12
		self.H6 = 13
		self.H7 = 14
		# Низкие частоты
		self.L1 = 15
		self.L2 = 16
		self.L3 = 17
		self.L4 = 18
		self.L5 = 19
		self.L6 = 20
		self.L7 = 21
		# Средние частоты
		self.C = 0
		self.D = 1
		self.E = 2
		self.F = 3
		self.G = 4
		self.A = 5
		self.B = 6

		self.tone_all = [
			# '''
			# Двумерный массив [x][y], где x обозначает тональность, а y - конкретные частоты нот в этой тональности
			# '''
			# До
			[1000,  # 0           пустая нота
			 262, 294, 330, 350, 393, 441, 495,  # 1-7          средние ноты
			 525, 589, 661, 700, 786, 882, 990,  # H1-H7        высокие ноты
			 131, 147, 165, 175, 196, 221, 248  # L1-L7        низкие ноты
			 ],
			# Ре
			[1000,  # 0           пустая нота
			 294, 330, 350, 393, 441, 495, 556,  # 1-7          средние ноты
			 589, 661, 700, 786, 882, 990, 1112,  # 8-14         высокие ноты
			 147, 165, 175, 196, 221, 248, 278  # 15-21        низкие ноты
			 ],
			# Ми
			[1000,  # 0           пустая нота
			 330, 350, 393, 441, 495, 556, 624,  # 1-7          средние ноты
			 661, 700, 786, 882, 990, 1112, 1248,  # 8-14         высокие ноты
			 165, 175, 196, 221, 248, 278, 312  # 15-21        низкие ноты
			 ],
			# Фа
			[1000,  # 0           пустая нота
			 350, 393, 441, 495, 556, 624, 661,  # 1-7          средние ноты
			 700, 786, 882, 935, 1049, 1178, 1322,  # 8-14         высокие ноты
			 175, 196, 221, 234, 262, 294, 330  # 15-21        низкие ноты
			 ],
			# Соль
			[1000,  # 0           пустая нота
			 393, 441, 495, 556, 624, 661, 742,  # 1-7          средние ноты
			 786, 882, 990, 1049, 1178, 1322, 1484,  # 8-14         высокие ноты
			 196, 221, 234, 262, 294, 330, 371  # 15-21        низкие ноты
			 ],
			# Ля
			[1000,  # 0           пустая нота
			 441, 495, 556, 589, 661, 742, 833,  # 1-7          средние ноты
			 882, 990, 1112, 1178, 1322, 1484, 1665,  # 8-14         высокие ноты
			 221, 248, 278, 294, 330, 371, 416  # 15-21        низкие ноты
			 ],
			# Си
			[1000,  # 0           пустая нота
			 495, 556, 624, 661, 742, 833, 935,  # 1-7          средние ноты
			 990, 1112, 1178, 1322, 1484, 1665, 1869,  # 8-14         высокие ноты
			 248, 278, 294, 330, 371, 416, 467  # 15-21        низкие ноты
			 ]
		]
		# Мелодия песни "Happy Birthday"
		self.melody_Happy_birthday = [5, 5,
									  6, 5, self.H1, 7, 5, 5, 6, 5, self.H2, self.H1, 5, 5, self.H5, self.H3, self.H1,
									  7, 6,
									  0, 0, self.H4, self.H4, self.H3, self.H1, self.H2, self.H1]
		# Ритм песни "Happy Birthday"
		self.beet_Happy_birthday = [0.5, 0.5,
									1, 1, 1, 2, 0.5, 0.5, 1, 1, 1, 2, 0.5, 0.5, 1, 1, 1, 1, 2,
									0.5, 0.5, 0.5, 0.5, 1, 1, 1, 2]

		pass

	def tone(self, pin, tune, beet):
		'''
        Воспроизведение ноты вместе с соответствующим тактом.
        :param pin: контакт
        :param tune: тональность
        :param beet: такт
        :return:
        '''
		tim = 500000 / tune
		duration_count = beet * 60 * tune / cfg.BEET_SPEED / cfg.CLAPPER
		for i in range(int(duration_count)):
			if tune != 1000:
				gpio.digital_write(gpio.BUZZER, False)
				time.sleep(tim / 500000)
				gpio.digital_write(gpio.BUZZER, True)
				time.sleep(tim / 500000)
			else:
				time.sleep(0.001)

	def play_music(self, major, melody, beet):
		'''
        :param melody: партитура
        :param beet: такт
        :return:
        '''
		length = len(melody)
		for i in range(length):
			tone_act = self.tone_all[major][melody[i]]
			self.tone(tone_act, beet[i])